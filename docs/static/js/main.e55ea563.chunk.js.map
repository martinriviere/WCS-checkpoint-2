{"version":3,"sources":["providers/GamesProvider.js","components/Game.js","pages/GameList.js","components/ScreenShot.js","pages/ScreenShots.js","App.js","serviceWorker.js","index.js"],"names":["GamesContext","createContext","GamesProvider","props","useState","games","setGames","useEffect","a","axios","get","data","fetchGames","Provider","value","children","Game","game","deleteGame","genreColor","genreId","className","Card","CardImg","top","width","src","background_image","alt","name","CardBody","CardTitle","CardSubtitle","genres","map","genre","id","Badge","color","key","rating","Row","style","margin","Col","to","Button","onClick","GameList","useContext","areBestGamesFiltered","setAreBestGamesFiltered","gameId","filter","Container","CardDeck","sm","ScreenShot","image","ScreenShots","useParams","currentGame","find","parseInt","length","short_screenshots","screenshot","position","left","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e55ea563.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport const GamesContext = createContext();\n\nfunction GamesProvider(props) {\n  const [games, setGames] = useState([]);\n  useEffect(() => {\n    const fetchGames = async () => {\n      const { data } = await axios.get(\n        \"https://wild-games.herokuapp.com/api/v1\"\n      );\n      setGames(data);\n    };\n    fetchGames();\n  }, []);\n\n  return (\n    <GamesContext.Provider value={{ games: games, setGames: setGames }}>\n      {props.children}\n    </GamesContext.Provider>\n  );\n}\n\nexport default GamesProvider;\n","import React from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n  Badge,\n  Row,\n  Col\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction Game({ game, deleteGame }) {\n  const genreColor = genreId => {\n    switch (genreId) {\n      case 1:\n        return \"primary\";\n      case 2:\n        return \"secondary\";\n      case 3:\n        return \"success\";\n      case 4:\n        return \"danger\";\n      case 5:\n        return \"warning\";\n      case 6:\n        return \"info\";\n      case 7:\n        return \"dark\";\n      default:\n        return \"light\";\n    }\n  };\n\n  return (\n    <div className=\"mt-3\">\n      <Card>\n        <CardImg top width=\"100%\" src={game.background_image} alt={game.name} />\n        <CardBody>\n          <CardTitle>{game.name}</CardTitle>\n          <CardSubtitle>\n            Genre:{\" \"}\n            {game.genres.map((genre, id) => (\n              <Badge color={genreColor(genre.id)} className=\"mr-1\" key={id}>\n                {genre.name}\n              </Badge>\n            ))}\n          </CardSubtitle>\n          <CardSubtitle className=\"mt-1\">\n            Rating: <Badge>{game.rating}</Badge>\n          </CardSubtitle>\n          <Row className=\"mt-3\" style={{ margin: \"auto\" }}>\n            <Col className=\"text-center\">\n              <Link to={`jeu/screenshot/${game.id}`}>\n                <Button className=\"m-1\">View screenshots</Button>\n              </Link>\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"text-center\">\n              <Button\n                onClick={() => deleteGame(game.id)}\n                color=\"danger\"\n                className=\"m-1\"\n              >\n                Delete\n              </Button>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n    </div>\n  );\n}\n\nexport default Game;\n","import React, { useState, useContext } from \"react\";\nimport Game from \"../components/Game\";\nimport { CardDeck, Row, Col, Container, Button } from \"reactstrap\";\nimport { GamesContext } from \"../providers/GamesProvider\";\n\nfunction GameList() {\n  const { games, setGames } = useContext(GamesContext);\n  const [areBestGamesFiltered, setAreBestGamesFiltered] = useState(false);\n\n  const deleteGame = gameId => {\n    setGames(games.filter(game => game.id !== gameId));\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col className=\"text-center mt-2\">\n          <Button\n            onClick={() => setAreBestGamesFiltered(!areBestGamesFiltered)}\n          >\n            {areBestGamesFiltered ? \"All games\" : \"Best Games\"}\n          </Button>\n        </Col>\n      </Row>\n      <CardDeck>\n        <Row>\n          {games\n            .filter(game => !areBestGamesFiltered || game.rating >= 4.5)\n            .map((game, id) => (\n              <Col sm=\"3\" key={id}>\n                <Game game={game} deleteGame={deleteGame} />\n              </Col>\n            ))}\n        </Row>\n      </CardDeck>\n    </Container>\n  );\n}\n\nexport default GameList;\n\n// const style = {\n//   display: \"flex\",\n//   flexWrap: \"wrap\"\n// };\n","import React from \"react\";\nimport { Card, CardImg } from \"reactstrap\";\n\nfunction ScreenShot({ image }) {\n  return (\n    <Card>\n      <CardImg top width=\"100%\" src={image} alt=\"Screenshot\" />\n    </Card>\n  );\n}\n\nexport default ScreenShot;\n","import React, { useContext } from \"react\";\nimport ScreenShot from \"../components/ScreenShot\";\nimport { GamesContext } from \"../providers/GamesProvider\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Container, Button } from \"reactstrap\";\n\nfunction ScreenShots(props) {\n  const { games } = useContext(GamesContext);\n  const { gameId } = useParams();\n  const currentGame = games.find(game => game.id === parseInt(gameId));\n  return games.length > 0 ? (\n    currentGame ? (\n      <>\n        <Container>\n          <div>\n            {currentGame.short_screenshots.map(screenshot => (\n              <ScreenShot image={screenshot.image} key={screenshot.id} />\n            ))}\n          </div>\n        </Container>\n        <Link to=\"/\">\n          <Button style={{ position: \"fixed\", top: 16, left: 16 }}>\n            Back to list\n          </Button>\n        </Link>\n      </>\n    ) : (\n      <h1>Pas de jeu Ã  cet identifiant</h1>\n    )\n  ) : (\n    <h1>Loading...</h1>\n  );\n}\n\nexport default ScreenShots;\n","import React from \"react\";\nimport GamesProvider from \"./providers/GamesProvider\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GameList from \"./pages/GameList\";\nimport ScreenShots from \"./pages/ScreenShots\";\n\nfunction App() {\n  return (\n    <GamesProvider>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={GameList} />\n          <Route path=\"/jeu/screenshot/:gameId\" component={ScreenShots} />\n        </Switch>\n      </Router>\n    </GamesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}